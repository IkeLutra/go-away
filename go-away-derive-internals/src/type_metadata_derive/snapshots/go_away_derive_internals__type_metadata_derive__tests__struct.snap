---
source: go-away-derive-internals/src/type_metadata_derive/mod.rs
expression: "test_conversion(quote! {\n                    struct MyData { field_one : String, field_two : String }\n                })"

---
#[automatically_derived]
impl ::go_away::TypeMetadata for MyData {
    fn metadata(registry: &mut ::go_away::TypeRegistry) -> ::go_away::FieldType {
        use go_away::{types, FieldType};
        let type_ref = {
            let mut st = types::Struct {
                name: "MyData".into(),
                fields: vec![],
            };
            st.fields.push(types::Field {
                name: "field_one".into(),
                serialized_name: "field_one".into(),
                ty: String::metadata(registry),
            });
            st.fields.push(types::Field {
                name: "field_two".into(),
                serialized_name: "field_two".into(),
                ty: String::metadata(registry),
            });
            registry.register_struct(st)
        };
        FieldType::Named(type_ref)
    }
}
