---
source: go-away/src/output.rs
expression: "GoType::Union(Union{name: \"MyUnion\".into(),\n                    representation:\n                        UnionRepresentation::AdjacentlyTagged{tag:\n                                                                  \"type\".into(),\n                                                              content:\n                                                                  \"data\".into(),},\n                    variants:\n                        vec![UnionVariant\n                             {\n                                 name : \"VarOne\" . into(), serialized_name :\n                                 \"VAR_ONE\" . into(),\n                             }, UnionVariant\n                             {\n                                 name : \"VarTwo\" . into(), serialized_name :\n                                 \"VAR_TWO\" . into(),\n                             }],}).to_string()"

---
type MyUnion struct {
	*VarOne
	*VarTwo
}

func (self *MyUnion) MarshalJSON() ([]byte, error) {
	if self.VarOne != nil {
		var output map[string]interface{}
		output["k"] = "VAR_ONE
		output["c"] = self.VarOne
		return json.Marshal(output)
	} else 	if self.VarTwo != nil {
		var output map[string]interface{}
		output["k"] = "VAR_TWO
		output["c"] = self.VarTwo
		return json.Marshal(output)
	}

